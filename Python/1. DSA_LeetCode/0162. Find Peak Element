162. Find Peak Element
A peak element is an element that is strictly greater than its neighbors.
Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
You must write an algorithm that runs in O(log n) time.
Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

Code: O(n)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        return(nums.index(max(nums)))

Code: O(n)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        if len(nums) == 1 :
            return 0
        elif len(nums) == 2:
            return 1 if nums[1]>nums[0] else 0
        else:
            for i in range(len(nums)):
                if i == 0 and nums[i] > nums[i+1]:
                    return i
                elif i == len(nums)-1 and nums[i] > nums[i-1]:
                    return i
                elif i!=0 and i!= len(nums)-1 and nums[i] > nums[i-1] and nums[i]  > nums[i+1]:
                    return i
                    break
Code: O(logN)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        nums.insert(0, float('-inf'))
        nums.append(float('-inf'))

        l,r = 1, len(nums)-1

        while l<=r:
            mid = (l+r)//2
            if nums[mid]>=nums[mid-1] and nums[mid]>=nums[mid+1]:
                return mid-1
            elif nums[mid]>=nums[mid-1]:
                l = mid+1
            else:
                r=mid-1
        return -1
        
