class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        product = []
        prod_= prod(nums)
        for i in range(len(nums)):
            if nums[i] !=0:
                product.append(prod_//nums[i])
            else:
                product.append(prod(nums[:i])*prod(nums[i+1:]))
        return product

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        product_left = {}
        product_right = {}
        product_left[0] = 1
        product_right[len(nums)-1] = 1
        for i in range(1,len(nums)):
            product_left[i] = product_left[i-1] * nums[i-1]
            product_right[len(nums)-1-i] = product_right[len(nums)-i] * nums[len(nums)-i]
        product = {i:product_left.get(i)*product_right.get(i) for i in range(len(nums))}
        return list(product.values())

Question:
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
