class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        if str1+str2 != str2+str1:
            return ''
        else:
            from math import gcd
            return str1[:gcd(len(str1),len(str2))]
Question:
For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times)
Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

It means ab can be gcd of (ababab and abab)
and ab can not be gcd of (ababab and abc) because abc can not be formed by concatinating ab more than once.

Intution:
Let str1 = 'abcd'
str2 = 'pqr'
then
str1+str2 = 'abcdpqr'
str2+str1 = 'pqrabcd'

if str1 + str2 != str2 +str1 ---> no gcd
else gcd length will be the gcd of lengths of these 2 strings. Because for ababababab and abab, ab can be gcd not abab.
