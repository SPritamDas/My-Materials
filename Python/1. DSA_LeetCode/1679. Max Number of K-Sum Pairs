1679. Max Number of K-Sum Pairs
You are given an integer array nums and an integer k.
In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.
Return the maximum number of operations you can perform on the array.

Example 1:
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.
Example 2:
Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.

Intution:
Shorten the list if required. (The 1st and Last terms of list must be such that sum is k or just below k.)
Then use 2 pointer technique to find sum.
Count when sums == Traget

If we do not compress the list, then also it will work. But some un necessary Computations.

Code-1:
class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        nums = sorted(nums)
        if nums[0] + nums[len(nums)-1] < k:
            l = k - (nums[0]+ nums[len(nums)-1])
            for i in range(len(nums)):
                if nums[i]>=l:
                    nums = nums[i:]
                    break
        else:
            nums = nums
        l = 0
        r =len(nums)-1
        c = 0
        while l<r:
            if nums[l]+nums[r]==k:
                c+=1
                r-=1
                l+=1
            elif nums[l]+nums[r] > k:
                r -=1
            else:
                l+=1
        return c


        
